<?php

/**
 * VideoTable
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 */
class VideoTable extends Doctrine_Table
{
    /**
     * Returns an instance of this class.
     *
     * @return object VideoTable
     */
    public static function getInstance()
    {
        return Doctrine_Core::getTable('Video');
    }

    public static function getVideos($order, $cat_title)
    {
        $query = Doctrine_Query::create()
            ->select('*')
            ->from('Video v')
            ->where("is_converted = ?", false)
            ->addWhere("is_active = ?", true)
            ->addWhere('is_scrinshot = ?', true);

        if($cat_title != null)
        {


            $category = Doctrine::getTable('Category')->findOneBy('title', array($cat_title));


            $category_id = $category->getId().', '.CategoryTable::getChildrenCategory($category->getId());

            $query->leftJoin('v.Category c')
                ->addWhere("c.id in(".trim($category_id,', ').")");
            }

        switch($order)
        {
            case 'd': $query->orderBy('v.created_at desc');
                break;
            case 'v': $query->addSelect("(select count(video_id) from video_watching where v.id = video_id) as watch");
                      $query->orderBy("watch desc");
                break;
            case 'c': $query->addSelect("(select count(record_id) from comment where record_model = 'Video' and record_id = v.id) as comment");
                      $query->orderBy("comment desc");
                break;
            case 'r': $query->addSelect("(select avg(video_id) from video_rating where v.id = video_id) as rating");
                      $query->orderBy("rating desc");
                break;
            default:
                $query->orderBy('v.created_at desc');
                break;
        }

        return $query;
    }

    public static function getConvertVideo()
    {
        return Doctrine_Query::create()
            ->select("*")
            ->from("Video")
            ->where("is_converted = ?", true)
            ->addWhere("is_edit = ?", false)
            ->limit(1)
            ->execute();

    }

    public static function getVideosNeadScrinshot()
    {
        return Doctrine_Query::create()
            ->select('*')
            ->from('Video')
            ->where("is_converted = ?", false)
            ->addWhere("is_edit = ?", false)
            ->addWhere('is_scrinshot = ?', false)
            ->execute();
    }

}